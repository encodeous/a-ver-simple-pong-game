package ca.encodeous.pong.gui;

import ca.encodeous.pong.Constants;
import ca.encodeous.pong.ai.BuilderTheBob;
import ca.encodeous.pong.ai.TuneableAi;
import ca.encodeous.pong.network.client.PongClient;
import ca.encodeous.pong.network.server.PongHost;
import ca.encodeous.pong.rendering.PongWindow;
import ca.encodeous.pong.system.Controller;
import ca.encodeous.pong.system.PlayerController;
import ca.encodeous.pong.system.PongSystem;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;

public class MainMenu extends JFrame {
    public static MainMenu instance;
    private JTabbedPane gameModeSelector;
    private JPanel mainPanel;
    private JPanel singlePlayerPanel;
    private JPanel modeSelector;
    private JComboBox aiSelect;
    private JPanel difficultyPanel;
    private JSlider difficultySlider;
    private JLabel difficulty;
    private JPanel captionPanel;
    private JButton playButton;
    private JLabel creditsLabel;
    private JPanel multiPlayerPanel;
    private JTabbedPane multiPlayerMode;
    private JLabel hostInfoText;
    private JPanel hostInfoPanel;
    private JLabel hostIpAddress;
    private JTextField ipAddressField;
    private JLabel ipHelpText;
    private JButton joinButton;
    private JPanel helpPanel;
    private JTextArea helpText;
    private PongHost host;

    public MainMenu() {
        instance = this;
        setContentPane(mainPanel);
        setSize(600, 400);
        setResizable(false);
        setTitle("Pong? Perhaps... - Main Menu");

        // Add window listener.
        addWindowListener(
                new WindowAdapter() {
                    public void windowClosing(WindowEvent e) {
                        System.exit(0);
                    }
                }
        );
        setLocationRelativeTo(null);
        aiSelect.addItemListener(e -> {
            if (e.getItem().equals("Custom")) {
                difficultyPanel.setVisible(aiSelect.getSelectedItem().equals("Custom"));
            }
        });
        difficultyPanel.setVisible(false);
        difficultySlider.addChangeListener(e -> {
            difficulty.setText(String.valueOf(difficultySlider.getValue()));
        });
        difficulty.setText(String.valueOf(difficultySlider.getValue()));
        difficulty.setPreferredSize(new Dimension(70, 0));
        playButton.addActionListener(e -> {
            // play game (SP)
            PongWindow window = new PongWindow();
            Controller controller;
            if (aiSelect.getSelectedIndex() == 0) {
                controller = new TuneableAi(TuneableAi.BOB_NERF);
            } else if (aiSelect.getSelectedIndex() == 1) {
                controller = new TuneableAi(TuneableAi.FRANK_NERF);
            } else if (aiSelect.getSelectedIndex() == 2) {
                controller = new BuilderTheBob();
            } else {
                controller = new TuneableAi((int) (Constants.MAX_NERF - difficultySlider.getValue()));
            }
            PlayerController playerControl = new PlayerController(window.getInputHandler());
            PongSystem system = new PongSystem(controller, playerControl, window);
            system.startGame();
            playerControl.finishSubscription(system.getRightPaddle());
            window.setVisible(true);
            window.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent windowEvent) {
                    system.stopGame();
                }
            });
        });
        joinButton.addActionListener(e -> {
            // join server (tp)
            PongClient client = new PongClient();
            if (ipAddressField.getText().startsWith("wss://")) {
                client.connect(URI.create(ipAddressField.getText()));
            } else {
                client.connect(URI.create("ws://" + ipAddressField.getText()));
            }
        });
        multiPlayerMode.addChangeListener(e -> {
            if (multiPlayerMode.getSelectedIndex() == 1) {
                // start server
                host = new PongHost();
                hostIpAddress.setText(host.accept());
            } else {
                // stop server & cleanup
                if (host != null) {
                    host.destroy();
                    host = null;
                }
                hostIpAddress.setText("Detecting your computer's LAN address...");
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        gameModeSelector = new JTabbedPane();
        gameModeSelector.setTabPlacement(1);
        mainPanel.add(gameModeSelector, BorderLayout.CENTER);
        singlePlayerPanel = new JPanel();
        singlePlayerPanel.setLayout(new GridBagLayout());
        gameModeSelector.addTab("Singleplayer", singlePlayerPanel);
        modeSelector = new JPanel();
        modeSelector.setLayout(new BorderLayout(0, 0));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        singlePlayerPanel.add(modeSelector, gbc);
        aiSelect = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Bob (Easy)");
        defaultComboBoxModel1.addElement("Frank (Medium)");
        defaultComboBoxModel1.addElement("Builder the Bob (Impossible)");
        defaultComboBoxModel1.addElement("Custom");
        aiSelect.setModel(defaultComboBoxModel1);
        modeSelector.add(aiSelect, BorderLayout.CENTER);
        playButton = new JButton();
        playButton.setText("Play!");
        modeSelector.add(playButton, BorderLayout.EAST);
        difficultyPanel = new JPanel();
        difficultyPanel.setLayout(new BorderLayout(0, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        singlePlayerPanel.add(difficultyPanel, gbc);
        difficultySlider = new JSlider();
        difficultySlider.setInverted(false);
        difficultySlider.setMajorTickSpacing(100);
        difficultySlider.setMaximum(1000);
        difficultySlider.setMinorTickSpacing(50);
        difficultySlider.setPaintTicks(true);
        difficultySlider.setSnapToTicks(true);
        difficultyPanel.add(difficultySlider, BorderLayout.CENTER);
        difficulty = new JLabel();
        difficulty.setText("Difficulty");
        difficultyPanel.add(difficulty, BorderLayout.EAST);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 36, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("PONG");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        singlePlayerPanel.add(label1, gbc);
        multiPlayerPanel = new JPanel();
        multiPlayerPanel.setLayout(new BorderLayout(0, 0));
        gameModeSelector.addTab("Two-player (LAN)", multiPlayerPanel);
        multiPlayerMode = new JTabbedPane();
        multiPlayerMode.setTabPlacement(3);
        multiPlayerPanel.add(multiPlayerMode, BorderLayout.CENTER);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        multiPlayerMode.addTab("Join", panel1);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel2, gbc);
        ipAddressField = new JTextField();
        ipAddressField.setText("");
        ipAddressField.setToolTipText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(ipAddressField, gbc);
        ipHelpText = new JLabel();
        ipHelpText.setText("Enter the server's IP Address");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(ipHelpText, gbc);
        joinButton = new JButton();
        joinButton.setText("Join");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(joinButton, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        multiPlayerMode.addTab("Host", panel3);
        hostInfoPanel = new JPanel();
        hostInfoPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        panel3.add(hostInfoPanel, gbc);
        hostInfoText = new JLabel();
        hostInfoText.setText("Allow the other player to connect to the following address:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        hostInfoPanel.add(hostInfoText, gbc);
        hostIpAddress = new JLabel();
        Font hostIpAddressFont = this.$$$getFont$$$(null, Font.BOLD, -1, hostIpAddress.getFont());
        if (hostIpAddressFont != null) hostIpAddress.setFont(hostIpAddressFont);
        hostIpAddress.setText("Detecting your computer's LAN address...");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        hostInfoPanel.add(hostIpAddress, gbc);
        helpPanel = new JPanel();
        helpPanel.setLayout(new GridBagLayout());
        gameModeSelector.addTab("Help", helpPanel);
        helpText = new JTextArea();
        helpText.setEditable(false);
        helpText.setText("This is a rendition of the classic PONG game designed to be\nminimalistic and simple to play.\n\nTo control your paddle, either use UP/DOWN arrow keys\nOR use your mouse to drag it.\n\nTo win a game, you need to reach 11 points before the other player.\n");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        helpPanel.add(helpText, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        helpPanel.add(spacer1, gbc);
        creditsLabel = new JLabel();
        creditsLabel.setText("Adam Chen / encodeous 2023 - Simpleish Pong Game");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        helpPanel.add(creditsLabel, gbc);
        captionPanel = new JPanel();
        captionPanel.setLayout(new BorderLayout(0, 0));
        mainPanel.add(captionPanel, BorderLayout.SOUTH);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
